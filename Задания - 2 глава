1) True и False

Теория: В языке программирования Python логические типы данных True и False являются базовыми элементами. True означает истину, а False – ложь.

Логические операции в Python используются для сравнения значений и выполнения определенных действий на основе результатов этого сравнения.
В Python логические операторы работают на базе булевой алгебры и включают такие операторы, как and, or и not.

В Python логическое выражение может быть истинным или ложным. Истина задается значением True, а ложь – значением False.
Логические операторы позволяют комбинировать несколько логических выражений для получения более сложных логических условий.

Например, выражение "x > 5 and x < 10" будет истинным только в том случае, если значение переменной x будет больше 5 и меньше 10.

Оператор not изменяет результат логического выражения на противоположный, то есть истину на ложь и наоборот.
Например, выражение "not x > 5" будет истинным только в том случае, если значение переменной x будет меньше или равно 5.

Логические типы True и False также используются в условных операторах и циклах.
В условных операторах, таких как if и else, и в циклах, например, while и for, логические выражения используются для принятия решений и выполнения
определенных действий на основе результатов этого сравнения.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) if elif else

Теория: Условные конструкции if, elif, else, являются базовыми элементами языка Python,
которые позволяют выполнять различные действия в зависимости отвыполнения определенных условий.

Конструкция if задает первичный блок условия, который исполняется, если его условие является истинным (True). 

Например:

if test_var == True:
    print("True")

`test_var` – это переменная, значение которой проверяется на истинность.

Конструкция elif позволяет добавить дополнительные условия и блоки команд при выполнении тех же самых условий в первичном блоке. 

Наример:

if test_var == True:
    print("True")
elif test_var == "Hello":
    print("Hello")

Данный пример помогает выполнить разные действия в зависимости от значения переменной `test_var`.

Блок else задает действия, которые необходимо выполнить, если первичный блок if не был выполнен (условия в нем были ложными),
и ни одно из дополнительных условий elif не было выполнено.

Например:

if test_var == True:
    print("True")
elif test_var == "Hello":
    print("Hello")
else:
    print("Ни одно из условий не было выполнено")


Конструкций if elif else может быть сколько угодно. Однако, при использовании более двух условий рекомендуется использовать конструкции switch-case или словари в Python,
так как они удобнее и понятнее для чтения.

