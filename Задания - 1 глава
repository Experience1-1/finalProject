1) Принт

Задача: вывести 3 элемента: "Привет мир!" "Hello, world!" "387".

print("Привет, мир!")
print("Hello, world!")
print("387")

Теория:

Функция print() в Python используется для вывода информации на экран. Она может принимать любое количество аргументов разных типов данных.
Вот некоторые примеры использования функции print():
--------------------
Пример 1: Простой вывод на экран

    print("Hello, World!")

Этот код выведет на экран строку "Hello, World!".
--------------------
Пример 2: Вывод нескольких аргументов

    print("Hello,", "World!")

Этот код выведет на экран две строки, разделенные пробелом: "Hello," и "World!".
--------------------
Пример 3: Вывод значения переменной

    name = "Alice"
    print("My name is", name)

Этот код выведет на экран строку "My name is Alice".
--------------------
Пример 4: Форматированный вывод

    age = 25
    print("I am {} years old".format(age))

Этот код выведет на экран строку "I am 25 years old". Вместо фигурных скобок {} будет подставлено значение переменной age.
--------------------
Пример 5: Использование разделителя

    print("apple", "banana", "orange", sep=", ")

Этот код выведет на экран три строки: "apple, banana, orange". Разделитель между элементами списка задан как ", ".
--------------------
Пример 6: Использование конечного символа

    print("One", end=" ")
    print("Two", end=" ")
    print("Three")

Этот код выведет на экран три строки: "One Two Three". В конце каждой строки будет добавлен пробел вместо символа новой строки.

Это лишь некоторые примеры использования функции print().
Функция имеет множество дополнительных параметров, которые позволяют управлять форматированием и выводом на экран.
Для получения более подробной информации о функции print() рекомендуется обратиться к документации Python.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Переменные

Задача: Задать 3 значения переменным и вывести их принтом

a="Привет мир!"
b="Привет "
c="Мир!"
print(a)
print(b, c)

Теория: 
В Python переменные служат для хранения и обработки данных. Для создания переменной необходимо присвоить ей имя и значение.
Вот несколько примеров использования переменных в Python:
--------------------
Пример 1: Создание переменной и присвоение ей значения

    x = 5

В этом примере переменная x создается и ей присваивается значение 5. Теперь можно использовать переменную x в дальнейшем коде.
--------------------
Пример 2: Изменение значения переменной

    x = 5
    x = 10
    
В этом примере переменной x сначала присваивается значение 5, а затем это значение изменяется на 10. Теперь переменная x содержит значение 10.
--------------------
Пример 4: Использование переменной в строке

    name = "Alice"
    print("Hello, " + name)

В этом примере создается переменная name, которой присваивается значение "Alice".
Затем эта переменная используется в строке, которая выводится на экран с помощью функции print(). Результат будет строка "Hello, Alice".
--------------------
Пример 5: Использование переменной с помощью форматирования

    age = 25
    print("I am {} years old".format(age))

В этом примере создается переменная age, которой присваивается значение 25. Затем переменная используется в строке с помощью метода format(). Фигурные скобки {} в строке будут заменены на значение переменной age. Результат будет строка "I am 25 years old".

Это лишь несколько примеров использования переменных в Python. Важно помнить, что при создании переменных необходимо выбирать понятные и осмысленные имена, а также следить за правильностью типов данных, которые хранятся в переменных.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Списки

Теория:

Листы (списки) в Python представляют собой упорядоченную последовательность элементов, которые могут быть различного типа данных. Для работы со списками в Python существует множество методов и функций.

1. Создание списка
Списки в Python создаются с помощью квадратных скобок [], а элементы в них разделяются запятыми:

my_list = [] # пустой список
my_list2 = [1, 2, 3] #Список с числами 1, 2 и 3
my_list3 = ["apple", "banana", "cherry"] #Список со словами
my_list4 = [1, "hi", 3.14, True] #Список с разными элементами


2. Обращение к элементам списка
Обращение к элементам списка осуществляется по индексу, который начинается с 0. Это значит, что первый элемент в списке имеет индекс 0:

my_list = ["apple", "banana", "cherry"]
print("Первый элемент: ", my_list[0])
print("Второй элемент: ", my_list[1])
print("Третий элемент: ", my_list[2])

Вывод: Первый элемент:  apple
       Второй элемент:  banana
       Третий элемент:  cherry

3. Добавление элементов в список

my_list=[] #создание пустого списка

my_list.append('one')#добавление элемента "one" в конец списка
my_list.append('two')#добавление элемента "two" в конец списка
my_list.append('three')#добавление элемента "three" в конец списка
print(my_list)

Вывод: ['one', 'two', 'three']

Добавление элемента на указанную позицию:

my_list.insert(0, 'zero')
print(my_list) 
Вывод: ['zero', 'one', 'two', 'three']


4. Удаление элементов из списка:

my_list = ["apple", "banana", "cherry"]
my_list.remove("banana") # удаление элемента 'banana'
print(my_list) 
Вывод: ["apple", "cherry"]

Удаление элемента с указанным индексом (первый элемент):

my_list.pop(0) 
print(my_list) 
Вывод: ["banana", "cherry"]


5. Операции со списками

Объединение списков:
my_list = [1, 2, 3]
my_list2 = [4, 5, 6]
print(my_list + my_list2) 
Вывод: [1, 2, 3, 4, 5, 6]

Повторение списка:
print(my_list * 3) 
Вывод: [1, 2, 3, 1, 2, 3, 1, 2, 3]


6. Функции для работы со списками

my_list = [5, 2, 1, 7, 9]

print("Длинна списка: ", len(my_list))
print("Наибольший элемент: ", max(my_list))
print("Наименьший элемент: ", min(my_list))
print("Сумма всех элементов: ", sum(my_list))
print("Отсортированный по возрастанию список: ", sorted(my_list))

Вывод: Длинна списка:  5
       Наибольший элемент:  9
       Наименьший элемент:  1
       Сумма всех элементов:  24
       Отсортированный по возрастанию список:  [1, 2, 5, 7, 9]


7. Срезы (slicing)

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print("Срез от второго до четвертого элемента: ", my_list[1:4])
print("Срез от начала списка до третьего элемента: ", my_list[:3])
print("Срез от седьмого элемента до конца списка: ", my_list[6:])
print("Срез от второго до седьмого элемента с шагом 2: ", my_list[1:7:2])

Вывод: Срез от второго до четвертого элемента:  [2, 3, 4]
       Срез от начала списка до третьего элемента:  [1, 2, 3]
       Срез от седьмого элемента до конца списка:  [7, 8, 9]
       Срез от второго до седьмого элемента с шагом 2:  [2, 4, 6]

Это лишь некоторые основные методы и функции для работы со списками в Python. Списки очень часто используются для хранения и обработки данных, поэтому важно уметь оперировать ими и знать возможности их использования.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) Строковые и числовые переменные

Задача: Вывести 4 переменные в противоположном типе число/строка

a=5
b="9"
c=8
d="4"

print(str(a))
print(int(b))
print(str(c))
print(int(d))

Теория: Переменные бывают двух видов: числовые и строковые. Числовые переменные хранят числа, и с ними можно выполнять операции +, -, *, <, > и т.д.
Чтобы создать числовую переменную нужно написать так:{название переменной}={значение}. Значение записывается без ковычек.
Например:
a=27
b=234

Строковые переменные могут хранить в себе любые символы - текст, числа, знаки препинания.
Чтобы создать строковую переменную нужно написать так:{название переменной}={"значение"}. При создании такой переменной значение берется в ковычки.
Например:
a="Привет, мир!"
b="Сегодня 5 марта 2023 года"


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Ввод данных

Задача: ввести данные для 3 переменных и выдать их же

a=int(input("Введите число"))
b=input("Введите фразу")
print("Это введенное число:", a)
print("Это введенная строка", b)

Теория:

Функция input() используется в Python для считывания пользовательского ввода.

Синтаксис:
input("{комментарий}")

Параметры:
{Комментарий} – необязательный параметр. Это строка, которая будет отображаться на экране, давая пользователю понять, что необходимо ввести.

Возвращаемое значение:
Функция input() считывает введенные пользователем данные в виде строк и возвращает их в качестве результата.

Например:

name = input("Введите ваше имя: ")
print("Ваше имя: " + name)

В данном примере, пользователь должен ввести своё имя. Оно будет считано функцией input() и сохранено в переменной name. Затем мы выводим на экран сообщение с использованием оператора сложения и конкатенации строк: "Ваше имя: " + name.



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


5) Действия с числовыми переменными +,-

Задача: Создать 3 переменных и выполнить дейсивия

a=int(input("Введите первое число"))
b=int(input("Введите второе число"))
c=int(input("Введите третье число"))
print(a+b)
print(b+c)
print(c+a)
print(a+b+c)
print(a-b)
print(b-c)
print(c-a)
print(a-b-c)


Теория:

Инструкция по использованию операторов + и - в Python:

Оператор "+" используется для сложения двух чисел.
Для сложения чисел необходимо написать выражение, в котором использован оператор + и два числа, например: 2 + 3. Результатом будет число 5.

x = 2
y = 3
print(x + y)

Результат: 5

Оператор "-" используется для вычитания одного числа из другого.
Для вычитания необходимо написать выражение, в котором использован оператор - и два числа, например: 5 - 3. Результатом будет число 2.

a = 8
b = 3
print(a - b)

Результат 5

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5) Действия с числовыми переменными *,**,/,//,%

Задача: Создать 3 переменных и выполнить дейсивия

a=int(input("Введите первое число"))
b=int(input("Введите второе число"))
c=int(input("Введите третье число"))
print(a*b)
print(b*c)
print(a*c)
print(a/b)
print(b/c)
print(c/a)
print(a//b)
print(b//c)
print(c//a)
print(a%b)
print(b%c)
print(c%a)

Теория: 

* - оператор умножения. Он применяется для умножения двух чисел:

a = 3
b = 5
c = a * b
print(c)

Вывод: 15

** - оператор возведения в степень. Он применяется для возведения числа в указанную степень:

a = 2
b = 4
c = a ** b
print(c)

Вывод: 16 (2 в степени 4)

/ - оператор деления. Он применяется для деления одного числа на другое. Если оба числа являются целыми, то результат будет преобразован в число с плавающей точкой: 

a = 11
b = 2
c = a / b
print(c) 

Вывод: 5.5

// - оператор целочисленного деления. Он применяется для деления одного числа на другое и возвращает только целую часть результата, без точки:

a = 11
b = 2
c = a // b
print(c) 

Вывод: 5

% - оператор остатка от деления. Он применяется для получения остатка от деления одного числа на другое.:

a = 11
b = 2
c = a % b
print(c)

Вывод: 1 (11 / 2 = 5 с остатком 1)
